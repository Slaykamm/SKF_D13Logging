"""
Django settings for NewsPaper project.

Generated by 'django-admin startproject' using Django 3.1.5.

For more information on this file, see
https://docs.djangoproject.com/en/3.1/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/3.1/ref/settings/
"""

from pathlib import Path
import os

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/3.1/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = '95ju3larj$((asr))s4s6!-*5q1hsk4l$3bg@jyvi*3(3mtz#$'

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = True

ALLOWED_HOSTS = []
ALLOWED_HOSTS = ['127.0.0.1']

# Application definition

INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',

    'news.apps.NewsConfig',
    'accounts',
    'django_filters',
    'sign',
    'appointment',
    

    'django.contrib.sites',   #вот это какждый раз теряется в скф
    'django_apscheduler',

    'allauth',
    'allauth.account',
    'allauth.socialaccount',
    # ... include the providers you want to enable:
    'allauth.socialaccount.providers.google',

]
DEFAULT_FROM_EMAIL = 'destpoch44@mail.ru'
SITE_ID = 1



MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
]

ROOT_URLCONF = 'NewsPaper.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
                
            ],
        },
    },
]

WSGI_APPLICATION = 'NewsPaper.wsgi.application'


# Database
# https://docs.djangoproject.com/en/3.1/ref/settings/#databases

DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.sqlite3',
        'NAME': BASE_DIR / 'db.sqlite3',
    }
}


# Password validation
# https://docs.djangoproject.com/en/3.1/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]

AUTHENTICATION_BACKENDS = [

    # Needed to login by username in Django admin, regardless of `allauth`
    'django.contrib.auth.backends.ModelBackend',

    # `allauth` specific authentication methods, such as login by e-mail
    'allauth.account.auth_backends.AuthenticationBackend',
]



# Internationalization
# https://docs.djangoproject.com/en/3.1/topics/i18n/

LANGUAGE_CODE = 'en-us'

TIME_ZONE = 'UTC'

USE_I18N = True

USE_L10N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/3.1/howto/static-files/

STATIC_URL = '/static/'
STATICFILES_DIRS = [
    BASE_DIR / "static"
]

#LOGIN_URL = '/sign/login/'

LOGIN_URL = '/accounts/login/'
SITE_ID = 1

LOGIN_REDIRECT_URL = '/news/'


ACCOUNT_EMAIL_REQUIRED = True
ACCOUNT_UNIQUE_EMAIL = True
ACCOUNT_USERNAME_REQUIRED = False
ACCOUNT_AUTHENTICATION_METHOD = 'email'
ACCOUNT_EMAIL_VERIFICATION = 'optional'

ACCOUNT_FORMS = {'signup': 'sign.models.BasicSignupForm'}





EMAIL_HOST = 'smtp.mail.ru' # адрес сервера Яндекс-почты для всех один и тот же
EMAIL_PORT = 465 # порт smtp сервера тоже одинаковый
EMAIL_HOST_USER = 'destpoch44' #'destpoch33' #'destpoch22' # ваше имя пользователя, например если ваша почта user@yandex.ru, то сюда надо писать user, иными словами, это всё то что идёт до собаки
EMAIL_HOST_PASSWORD = 'a2%aytsE1AOO'  #'IgYtpPaUr43-' #'IrIpyPr*oS31' #'IgYtpPaUr43-' #'IrIpyPr*oS31' #'qwerty123$' #'slaykam1111' # пароль от почты
EMAIL_USE_SSL = True # Яндекс использует ssl, подробнее о том, что это, почитайте на Википедии, но включать его здесь обязательно
ACCOUNT_CONFIRM_EMAIL_ON_GET = False
SOCIALACCOUNT_EMAIL_VERIFICATION = ACCOUNT_EMAIL_VERIFICATION


# формат даты, которую будет воспрнимать наш задачник(вспоминаем урок по фильтрам) 
APSCHEDULER_DATETIME_FORMAT = "N j, Y, f:s a"
APSCHEDULER_RUN_NOW_TIMEOUT = 25  # Seconds

#celery
CELERY_BROKER_URL = 'redis://localhost:6379'
CELERY_RESULT_BACKEND = 'redis://localhost:6379'
CELERY_ACCEPT_CONTENT = ['application/json']
CELERY_TASK_SERIALIZER = 'json'
CELERY_RESULT_SERIALIZER = 'json'

CACHES = {
    'default': {
        'BACKEND': 'django.core.cache.backends.filebased.FileBasedCache',
        'LOCATION': os.path.join(BASE_DIR, 'cache_files'), # Указываем, куда будем сохранять кэшируемые файлы! Не забываем создать папку cache_files внутри папки с manage.py!
    }
}


LOGGING = {
    'version' : 1,
    'disable_existing_looger' : False,
    'loggers' : {
        'django' : {
            'handlers': ['consoleDebug', 'consoleWarning', 'consoleErrorCritical', 'news'],
            'level' : 'DEBUG'
        },
        #ниже логгеры п. 3 дз and p. 5
        'django.request' : {
            'handlers' : ['errorFile', 'mail_admins'],
            'level' : 'ERROR'
        },
        'django.server' : {
            'handlers' : ['errorFile', 'mail_admins'],
            'level' : 'ERROR'
        },

        'django.template' : {
            'handlers' : ['errorFile'],
            'level' : 'ERROR'
        },

        'django.db_backends' : {
            'handlers' : ['errorFile'],
            'level' : 'ERROR'
        },
#ниже логгер п.4 homeworks
        'django.security' : {
            'handlers' : ['securityIssues'],
            'level' : 'DEBUG'
        },

    },

    'filters': {
        'require_debug_true': {
            '()': 'django.utils.log.RequireDebugTrue',
        },
        'require_debug_false': {
            '()': 'django.utils.log.RequireDebugFalse',
        },       
    },

    'handlers' : {
#обработчик  для п. 1 дз для дебуга ворнинга и еррора с критикал.
        'consoleDebug' : {
            'level' : 'DEBUG',  
            'filters': ['require_debug_true'],
            'class' : 'logging.StreamHandler',
            'formatter' : 'debugformatter'

        },
        'consoleWarning' : {
            'level' : 'WARNING',
            'filters': ['require_debug_true'],
            'class' : 'logging.StreamHandler',
            'formatter' : 'warningfortatter'
        },
        'consoleErrorCritical' : {
            'level' : 'ERROR',
            'filters': ['require_debug_true'],
            'class' : 'logging.StreamHandler',
            'formatter' : 'errorformatter'

        },
        
#обработчик  для п. 2 дз
        'news' : {
            'level' : 'INFO',
            'filters': ['require_debug_false'],
            'class' : 'logging.FileHandler',
            'filename' : 'general.log',
            'formatter' : 'infologger'
        },
    
#обработчик для п3 дз
        'errorFile' : {
            'level' : 'ERROR',
            'class' : 'logging.FileHandler',
            'filename' : 'errors.log',
            'formatter' : 'errorFileFormatter'

        },
#handler for p.4 homeworks
        'securityIssues' : {
            'level' : 'DEBUG',
            'class' : 'logging.FileHandler',
            'filename' : 'security.log',
            'formatter' : 'securityFormatter'
        },
#handler for p. 5 homeworks

        'mail_admins': {
            'level': 'ERROR',
            'filters': ['require_debug_false'],
            'class': 'django.utils.log.AdminEmailHandler',
            'formatter' : 'emailAdminFormatter',
        },

    },

#форматер для п.1 дз
    'formatters' : {

        'debugformatter' : {
            'format' : '{levelname} {asctime} {message}',
            'datetime' : '%Y.%m.%d %H:%M:%S',
            'style': '{',
        },

        'warningfortatter' : {
            'format' : '{levelname} {asctime} {pathname} {message}',
            'datetime' : '%Y.%m.%d %H:%M:%S',
            'style': '{',
        },

        'errorformatter' : {
            'format' : '{levelname} {asctime} {exc_info} {pathname} {message}',
            'datetime' : '%Y.%m.%d %H:%M:%S',
            'style': '{',
        },
#formatter for p. 5 homeworks
        'emailAdminFormatter' : {
            'format' : '{levelname} {asctime}  {pathname} {message}',
            'datetime' : '%Y.%m.%d %H:%M:%S',
            'style': '{',

        },
        

#форматер для обработчика п.2 дз

        'infologger' : {
            'format' : '{asctime} {levelname} {module} {message}',
            'datetime' : '%Y.%m.%d %H:%M:%S',
            'style': '{',
        },

# форматер для п. 3 дз
        'errorFileFormatter' : {
          'format' : '{asctime} {levelname} {message} {exc_info}',  
          'datetime' : '%Y.%m.%d %H:%M:%S',
          'style': '{',          
        },

# fortmatter for p. 4 homeworks
        'securityFormatter' : {
          'format' : '{asctime} {levelname} {module} {message}',  
          'datetime' : '%Y.%m.%d %H:%M:%S',
          'style': '{',   
        },
    },

}
